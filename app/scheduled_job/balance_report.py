from datetime import datetime, time, timedelta
import matplotlib.pyplot as plt
import pandas as pd
from django.db.models import Sum, Q, Value as V
from django.db.models.functions import Coalesce
from app.models import LoyaltyPointsTransaction, Organization
from telegram import Bot
from asgiref.sync import async_to_sync
import os
from config import REPORT_BOT_TOKEN, REPORT_CHAT_ID


def format_number(x):
    return f"{x:,}".replace(",", " ") if isinstance(x, (int, float)) else x


def generate_balance_report(report_date: datetime, output_path: str = "bonus_report.jpg"):
    """–°–≤–æ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π/—Å–ø–∏—Å–∞–Ω–∏–π –±–æ–Ω—É—Å–æ–≤ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É."""

    # ‚Äî‚Äî‚Äî –ì—Ä–∞–Ω–∏—Ü—ã —Å—É—Ç–æ–∫ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    start_day = datetime.combine(report_date.date(), time.min)
    mid_day   = datetime.combine(report_date.date(), time(12, 0))
    end_day   = datetime.combine(report_date.date(), time.max)

    # ‚Äî‚Äî‚Äî –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    initial = LoyaltyPointsTransaction.objects.filter(created_at__lt=start_day).aggregate(
        accrued = Sum('points', filter=Q(transaction_type='accrual')),
        redeemed = Sum('points', filter=Q(transaction_type='redeem')),
    )
    opening_balance = (initial['accrued'] or 0) - (initial['redeemed'] or 0)

    # ‚Äî‚Äî‚Äî –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –∑–∞ –æ–±–∞ –ø–æ–ª—É-–¥–Ω—è (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å) ‚Äî‚Äî
    org_qs = (
        Organization.objects
        .annotate(
            # –£—Ç—Ä–æ
            morn_accr = Coalesce(
                Sum(
                    'loyaltypointstransaction__points',
                    filter=Q(
                        loyaltypointstransaction__created_at__gte=start_day,
                        loyaltypointstransaction__created_at__lt=mid_day,
                        loyaltypointstransaction__transaction_type='accrual'
                    )
                ), V(0)
            ),
            morn_redm = Coalesce(
                Sum(
                    'loyaltypointstransaction__points',
                    filter=Q(
                        loyaltypointstransaction__created_at__gte=start_day,
                        loyaltypointstransaction__created_at__lt=mid_day,
                        loyaltypointstransaction__transaction_type='redeem'
                    )
                ), V(0)
            ),
            # –í–µ—á–µ—Ä
            eve_accr = Coalesce(
                Sum(
                    'loyaltypointstransaction__points',
                    filter=Q(
                        loyaltypointstransaction__created_at__gte=mid_day,
                        loyaltypointstransaction__created_at__lte=end_day,
                        loyaltypointstransaction__transaction_type='accrual'
                    )
                ), V(0)
            ),
            eve_redm = Coalesce(
                Sum(
                    'loyaltypointstransaction__points',
                    filter=Q(
                        loyaltypointstransaction__created_at__gte=mid_day,
                        loyaltypointstransaction__created_at__lte=end_day,
                        loyaltypointstransaction__transaction_type='redeem'
                    )
                ), V(0)
            ),
        )
        .order_by('name')     # —á—Ç–æ–±—ã —Å—Ç–æ–ª–±—Ü—ã –±—ã–ª–∏ –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    )

    # ‚Äî‚Äî‚Äî –°—É–º–º—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º (—Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–∏) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    total_morn_accr = sum(org.morn_accr for org in org_qs)
    total_morn_redm = sum(org.morn_redm for org in org_qs)
    total_eve_accr  = sum(org.eve_accr  for org in org_qs)
    total_eve_redm  = sum(org.eve_redm  for org in org_qs)

    mid_balance  = opening_balance + total_morn_accr - total_morn_redm
    closing_balance = mid_balance + total_eve_accr - total_eve_redm

    # ‚Äî‚Äî‚Äî –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    columns = (
        ["–ü–µ—Ä–∏–æ–¥", "–ù–∞—á–∞–ª—å–Ω—ã–π\n–±–∞–ª–∞–Ω—Å"] +
        [f"–ù–∞—á–∏—Å–ª–µ–Ω–æ\n({org.name})" for org in org_qs] +
        [f"–°–ø–∏—Å–∞–Ω–æ\n({org.name})"   for org in org_qs] +
        ["–ö–æ–Ω–µ—á–Ω—ã–π\n–±–∞–ª–∞–Ω—Å"]
    )

    # ‚îÄ‚îÄ —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ-–æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –æ–¥–Ω–æ–π ¬´–ø—Ä–æ—Å—Ç—ã–Ω—ë–π¬ª
    morn_accr   = [org.morn_accr for org in org_qs]
    eve_accr    = [org.eve_accr  for org in org_qs]
    morn_redm   = [org.morn_redm for org in org_qs]
    eve_redm    = [org.eve_redm  for org in org_qs]

    total_accr_per_org = [m + e for m, e in zip(morn_accr, eve_accr)]
    total_redm_per_org = [m + e for m, e in zip(morn_redm, eve_redm)]

    row_morning = (["00:00‚Äì11:59", opening_balance] + morn_accr + morn_redm + [mid_balance])
    row_evening = (["12:00‚Äì23:59", mid_balance]      + eve_accr  + eve_redm  + [closing_balance])
    row_total   = (["–ò—Ç–æ–≥–æ",       opening_balance]  + total_accr_per_org + total_redm_per_org + [closing_balance])

    data = [row_morning, row_evening, row_total]
    df = pd.DataFrame(data, columns=columns)

    formatted_df = df.applymap(format_number)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fig, ax = plt.subplots(figsize=(10, 3))
    ax.axis('off')
    table = ax.table(cellText=formatted_df.values, colLabels=columns, cellLoc='center', loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1, 2)

    # –í—ã–¥–µ–ª—è—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    last_row_idx = len(df) - 1
    for col_idx in range(len(columns)):
        cell = table[last_row_idx + 1, col_idx]  # +1 ‚Äî –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        cell.set_fontsize(10)
        cell.set_text_props(weight='bold')       # –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
        cell.set_facecolor('#f0f0f0')            # —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω

    plt.savefig(output_path, bbox_inches='tight', dpi=300)
    plt.close()


async def send_telegram_report(image_path: str, bot_token: str, chat_id: str, caption: str = "üìä –û—Ç—á–µ—Ç –ø–æ –±–æ–Ω—É—Å–∞–º"):
    bot = Bot(token=bot_token)
    with open(image_path, 'rb') as img:
        await bot.send_photo(chat_id=chat_id, photo=img, caption=caption)


def send_balance_report():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –±–∞–ª–∞–Ω—Å–µ –±–æ–Ω—É—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram.
    """
    if not REPORT_BOT_TOKEN:
        print("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        return

    report_date = datetime.now() - timedelta(days=1)  # –û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    output_path = f"bonus_report.jpg"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    generate_balance_report(report_date, output_path)

    orgs = Organization.objects.all()
    for org in orgs:
        if org.report_chat_id is None:
            print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {org.name}.")
            continue
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
        async_to_sync(send_telegram_report)(
            image_path=output_path, 
            bot_token=REPORT_BOT_TOKEN, 
            chat_id=org.report_chat_id,
            caption=f"üìä –û—Ç—á–µ—Ç –ø–æ –±–∞–ª–ª–∞–º –∑–∞ {report_date.strftime('%d.%m.%Y')}"
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if os.path.exists(output_path):
        os.remove(output_path)
